Алгоритмы и Логика

Логика - это правильное и рациональное мышление

Алгоритм - это последовательность команд. Набор инструкций, 
описывающий порядок действий для достижения конкретного результата

Структура данных - Это способ организации информации 
для более эффективного использования.

Программа: Это алгоритм + структура даных

Алгоритмы:

1. Bit Manipulation - https://habr.com/ru/companies/timeweb/articles/669394/
2. Arrays - https://habr.com/ru/companies/ruvds/articles/430380/
=========================================================================================================
Структур данных  - https://habr.com/ru/articles/497476/
---------------------------------------------------------------------------------------------------------
1. Стек (вызовов) (Stack)
Стек следует принципу LIFO (Last In First Out — последним вошел, первым вышел).
Стек имеет следующие методы:

push: добавить новый элемент
pop: удалить верхний элемент, вернуть его
peek: вернуть верхний элемент
length: вернуть количество элементов в стеке
---------------------------------------------------------------------------------------------------------
2. Очередь (кью) (Queue)
Очередь напоминает стек. Разница состоит в том, что очередь следует принципу FIFO (First In First Out — первым вошел, первым вышел).

Очередь имеет следующие методы:

enqueue: войти в очередь, добавить элемент в конец
dequeue: покинуть очередь, удалить первый элемент и вернуть его
front: получить первый элемент
isEmpty: проверить, пуста ли очередь
size: получить количество элементов в очереди
---------------------------------------------------------------------------------------------------------

3. Связный список (связанный, список узлов и ссылок или указателей) (Linked List)

Буквально, связный список — это цепочечная структура данных, где каждый узел состоит из двух частей
Односвязный список имеет следующие методы:

size: вернуть количество узлов
head: вернуть первый элемент (head — голова)
add: добавить элемент в конец (tail — хвост)
remove: удалить несколько узлов
indexOf: вернуть индекс узла
elementAt: вернуть узел по индексу
addAt: вставить узел в определенное место (по индексу)
removeAt: удалить определенный узел (по индексу)
---------------------------------------------------------------------------------------------------------

4. Коллекция (значений) (Set)

Коллекция (множество) — одна из основных концепций математики: набор хорошо определенных и обособленных объектов.
Стандартная коллекция имеет следующие методы:

values: вернуть все элементы в коллекции
size: вернуть количество элементов
has: проверить, имеется ли элемент в коллекции
add: добавить элемент
remove: удалить элемент
union: вернуть область пересечения двух коллекций
difference: вернуть отличия двух коллекций
subset: проверить, является ли одна коллекция подмножеством другой
---------------------------------------------------------------------------------------------------------

5. Хеш-таблица (таблица кэширования) (Hash Table)

Хеш-таблица — это структура данных, которая строится по принципу ключ-значение. 
Из-за высокой скорости поиска значений по ключам, она используется в таких структурах, 
как Map, Dictionary и Object.
Хеш-таблица имеет следующие методы:

add: добавить пару ключ/значение
remove: удалить пару
lookup: найти значение по ключу
---------------------------------------------------------------------------------------------------------

6. Дерево (Tree)

Древовидная структура — это многослойная (многоуровневая) структура.
Вот некоторые концепции древовидной структуры:

root: корневой элемент, не имеет «родителя»
parent node: прямой узел верхнего слоя (уровня), может быть только одним
child node: прямой узел (узлы) нижнего уровня, может быть несколько
siblings: дочерние элементы одного родительского узла
leaf: узел без «детей»
Edge: ветка или ссылка (связь) между узлами
Path: путь (совокупность ссылок) от начального узла до целевого элемента
Height of Tree (высота дерева): количество ссылок самого длинного пути от определенного элемента до узла, не имеющего потомков
Depth of Node (глубина узла): количество ссылок от корневого узла до определенного элемента
Degree of Node: количество потомков

Вот пример двоичного дерева поиска (Binary Search Tree, BST).
Методами данного дерева являются следующие:

add: добавить узел
findMin: получить минимальный узел
findMax: получить максимальный узел
find: найти определенный узел
isPresent: проверить наличие определенного узла
remove: удалить узел



---------------------------------------------------------------------------------------------------------

7. Нагруженное (префиксное) дерево (Trie, читается как «try»)

Префиксное дерево — это разновидность поискового дерева.
Префиксное дерево имеет следующие методы:

add: добавить слово в словарь
isWord: проверить наличие слова
print: вернуть все слова
---------------------------------------------------------------------------------------------------------

8. Граф (график) (Graph)

Граф, также известный как сеть (Network), представляет собой коллекцию связанных между собой узлов.

---------------------------------------------------------------------------------------------------------