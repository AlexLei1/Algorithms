//! ====================================================================================================================
//* 125. Valid Palindrome

//todo Фраза является палиндромом, если после преобразования всех прописных букв в строчные и удаления всех не буквенно-цифровых символов,
//todo он читается одинаково вперед и назад. Буквенно-цифровые символы включают буквы и цифры.

//todo Учитывая строку s, вернуть true, если это палиндром, или false в противном случае.

//todo (Two Pointers)
//! ====================================================================================================================

var isPalindrome = function(s) {
    
};

console.log(isPalindrome("A man, a plan, a canal: Panama")) // true
console.log(isPalindrome("race a car")) // false
console.log(isPalindrome(" ")) // true

//! ====================================================================================================================
//* 680. Valid Palindrome II

//todo Учитывая строку s, верните true, если s может быть палиндромом после удаления из нее не более одного символа.

//todo (Two Pointers)
//! ====================================================================================================================

var validPalindrome = function(s) {
    
};

console.log(validPalindrome("aba")) // true
console.log(validPalindrome("abca")) // true
console.log(validPalindrome("abc")) // false

//! ====================================================================================================================
//* 1984. Minimum Difference Between Highest and Lowest of K Scores

//todo Вам дан целочисленный массив nums с индексом 0, где nums[i] представляет собой оценку i-го ученика. Вам также дано целое число k.

//todo Выберите баллы любых k студентов из массива так, чтобы разница между самым высоким и самым низким из k баллов была минимизирована.

//todo Вернуть минимально возможную разницу.

//todo (Two Pointers)
//! ====================================================================================================================

var minimumDifference = function(nums, k) {
    
};

console.log(minimumDifference([90], 1))
console.log(minimumDifference([9,4,1,7], 2))

//! ====================================================================================================================
//* 1768. Merge Strings Alternately

//todo Вам даны две строки word1 и word2. Объедините строки, добавляя буквы в чередующемся порядке, начиная со word1.
//todo Если строка длиннее другой, добавьте дополнительные буквы в конец объединенной строки.

//todo Верните объединенную строку.

//todo (Two Pointers)
//! ====================================================================================================================

var mergeAlternately = function(word1, word2) {
    
};

console.log(mergeAlternately("abc", "pqr")) // "apbqcr"
console.log(mergeAlternately("ab", "pqrs")) // "apbqrs"
console.log(mergeAlternately("abcd", "pq")) // "apbqcd"

//! ====================================================================================================================
//* 344. Reverse String

//todo Напишите функцию, которая переворачивает строку. Входная строка задается как массив символов s.

//todo Вы должны сделать это, изменив входной массив на месте с дополнительной памятью O (1).

//todo (Two Pointers)
//! ====================================================================================================================

var reverseString = function(s) {

};

console.log(reverseString(["h","e","l","l","o"]))  // ["o","l","l","e","h"]
console.log(reverseString(["H","a","n","n","a","h"]))  // ["h","a","n","n","a","H"]

//! ====================================================================================================================
//* 88. Merge Sorted Array

//todo Вам даны два целочисленных массива nums1 и nums2, отсортированные в порядке неубывания, и два целых числа m и n, 
//todo представляющие количество элементов в nums1 и nums2 соответственно.

//todo Объедините nums1 и nums2 в один массив, отсортированный в неубывающем порядке.

//todo Окончательно отсортированный массив не должен возвращаться функцией, а должен храниться внутри массива nums1. 
//todo Чтобы учесть это, nums1 имеет длину m n, где первые m элементов обозначают элементы, которые следует объединить, 
//todo а последние n элементов имеют значение 0 и их следует игнорировать. nums2 имеет длину n.

//todo (Two Pointers)
//! ====================================================================================================================

var merge = function(nums1, m, nums2, n) {
    
};

console.log(merge([1,2,3,0,0,0], 3, [2,5,6], 3)) // [1,2,2,3,5,6]
console.log(merge([1], 1, [], 0)) // [1]
console.log(merge([0], 0, [1], 1)) // [1]